#!/bin/sh -e

. ../../../scripts/test-utils.sh

fpp_to_json=../../../bin/fpp-to-json


run_test()
{
  args=$1
  infile=$2
  if test -n "$3"
  then
    outfile=$3
  else
    outfile=$infile
  fi


  {
    # Run fpp_to_json and concatenate the output files
    $fpp_to_json $infile.fpp $args 2>&1 | remove_path_prefix > $outfile.out.txt && \
    remove_path_prefix < fpp-ast.json >> $outfile.out.txt && \
    remove_path_prefix < fpp-loc-map.json >> $outfile.out.txt
  } && \
  {
    # Validate the location map
    if which python3 > /dev/null 2>&1
    then
      python3 python/locationMapValidator.py fpp-ast.json fpp-loc-map.json
    else
      # Work around an issue in CI
      echo "python3 is not available; skipping map validation" 1>&2
    fi
  } && \
  {
    # Clean up
    if [ "$args" = "-s" ]; then
      rm fpp-ast.json fpp-loc-map.json
    else
      remove_path_prefix < fpp-analysis.json >> $outfile.out.txt
      # Delete the JSON files
      rm fpp-ast.json fpp-loc-map.json fpp-analysis.json
    fi
  } && \
  {
    # Compare the output
    diff -u $outfile.ref.txt $outfile.out.txt > $outfile.diff.txt 2>&1
    if test $? -ne 0
    then
      cat $outfile.diff.txt
      return 1
    fi
  }
}

activeComponents(){
  run_test "" activeComponents
}

commands(){
  run_test "" commands
}

constTypesComponents(){
  run_test "" constTypesComponents
}

constants()
{
  run_test "" constants
}

dataProducts(){
  run_test "" dataProducts
}

enums()
{
  run_test "" enums
}

events(){
  run_test "" events
}

importedTopologies(){
  run_test "" importedTopologies
}

interfaces(){
  run_test "" interfaces
}

internalPorts()
{
  run_test "" internalPorts
}

matchedPorts(){
  run_test "" matchedPorts
}

modules()
{
  run_test "" modules
}

parameters(){
  run_test "" parameters
}

passiveComponent(){
  run_test "" passiveComponent
}

patternedConnections(){
  run_test "fprime/defs.fpp" patternedConnections
}

ports()
{
  run_test "" ports
}

queuedComponents(){
  run_test "" queuedComponents
}

simpleComponents()
{
  run_test "" simpleComponents
}

simpleTopology(){
  run_test "" simpleTopology
}

specialPorts()
{
  run_test "" specialPorts
}

stateMachine()
{
  run_test "" ../../fpp-syntax/test/state-machine stateMachine
}

syntaxOnly(){
  run_test "-s" syntaxOnly 
}

telemetry(){
  run_test "" telemetry
}

telemetryPackets(){
  run_test "" telemetryPackets
}

types()
{
  run_test "" types
}

tests="
activeComponents
commands
constTypesComponents
constants
dataProducts
enums
events
importedTopologies
interfaces
internalPorts
matchedPorts
modules
parameters
passiveComponent
patternedConnections
ports
queuedComponents
simpleComponents
simpleTopology
specialPorts
stateMachine
syntaxOnly
telemetry
telemetryPackets
types
"

run_suite $tests
