// ======================================================================
// \title  AliasTypeArrayAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for AliasType array
// ======================================================================

#include "AliasTypeArrayAc.hpp"
#include "Fw/Types/Assert.hpp"

// ----------------------------------------------------------------------
// Constructors
// ----------------------------------------------------------------------

AliasType ::
  AliasType() :
    Serializable()
{
  *this = AliasType({0, 2, 3});
}

AliasType ::
  AliasType(const ElementType (&a)[SIZE]) :
    Serializable()
{
  *this = a;
}

AliasType ::
  AliasType(const ElementType& e) :
    Serializable()
{
  *this = e;
}

AliasType ::
  AliasType(const std::initializer_list<ElementType>& il) :
    Serializable()
{
  *this = il;
}

AliasType ::
  AliasType(const AliasType& obj) :
    Serializable()
{
  *this = obj;
}

// ----------------------------------------------------------------------
// Operators
// ----------------------------------------------------------------------

AliasType::ElementType& AliasType ::
  operator[](const FwSizeType i)
{
  FW_ASSERT(i < SIZE, static_cast<FwAssertArgType>(i), static_cast<FwAssertArgType>(SIZE));
  return this->elements[i];
}

const AliasType::ElementType& AliasType ::
  operator[](const FwSizeType i) const
{
  FW_ASSERT(i < SIZE, static_cast<FwAssertArgType>(i), static_cast<FwAssertArgType>(SIZE));
  return this->elements[i];
}

AliasType& AliasType ::
  operator=(const AliasType& obj)
{
  if (this != &obj) {
    for (FwSizeType index = 0; index < SIZE; index++) {
      this->elements[index] = obj.elements[index];
    }
  }
  return *this;
}

AliasType& AliasType ::
  operator=(const ElementType (&a)[SIZE])
{
  for (FwSizeType index = 0; index < SIZE; index++) {
    this->elements[index] = a[index];
  }
  return *this;
}

AliasType& AliasType ::
  operator=(const std::initializer_list<ElementType>& il)
{
  // Since we are required to use C++11, this has to be a runtime check
  // In C++14, it can be a static check
  FW_ASSERT(il.size() == SIZE, static_cast<FwAssertArgType>(il.size()), static_cast<FwAssertArgType>(SIZE));
  FwSizeType i = 0;
  for (const auto& e : il) {
    FW_ASSERT(i < SIZE, static_cast<FwAssertArgType>(i), static_cast<FwAssertArgType>(SIZE));
    this->elements[i] = e;
    i++;
  }
  return *this;
}

AliasType& AliasType ::
  operator=(const ElementType& e)
{
  for (FwSizeType index = 0; index < SIZE; index++) {
    this->elements[index] = e;
  }
  return *this;
}

bool AliasType ::
  operator==(const AliasType& obj) const
{
  for (FwSizeType index = 0; index < SIZE; index++) {
    if (!((*this)[index] == obj[index])) {
      return false;
    }
  }
  return true;
}

bool AliasType ::
  operator!=(const AliasType& obj) const
{
  return !(*this == obj);
}

#ifdef BUILD_UT

std::ostream& operator<<(std::ostream& os, const AliasType& obj) {
  Fw::String s;
  obj.toString(s);
  os << s;
  return os;
}

#endif

// ----------------------------------------------------------------------
// Public member functions
// ----------------------------------------------------------------------

Fw::SerializeStatus AliasType ::
  serializeTo(Fw::SerializeBufferBase& buffer) const
{
  Fw::SerializeStatus status = Fw::FW_SERIALIZE_OK;
  for (FwSizeType index = 0; index < SIZE; index++) {
    status = buffer.serializeFrom((*this)[index]);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
  }
  return status;
}

Fw::SerializeStatus AliasType ::
  deserializeFrom(Fw::SerializeBufferBase& buffer)
{
  Fw::SerializeStatus status = Fw::FW_SERIALIZE_OK;
  for (FwSizeType index = 0; index < SIZE; index++) {
    status = buffer.deserializeTo((*this)[index]);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
  }
  return status;
}

FwSizeType AliasType ::
  serializedSize() const
{
  return SERIALIZED_SIZE;
}

#if FW_SERIALIZABLE_TO_STRING

void AliasType ::
  toString(Fw::StringBase& sb) const
{
  // Clear the output string
  sb = "";

  // Array prefix
  if (sb.length() + 2 <= sb.maxLength()) {
    sb += "[ ";
  } else {
    return;
  }

  for (FwSizeType index = 0; index < SIZE; index++) {
    Fw::String tmp;
    tmp.format("%" PRIu32 "", this->elements[index]);

    FwSizeType size = tmp.length() + (index > 0 ? 2 : 0);
    if ((size + sb.length()) <= sb.maxLength()) {
      if (index > 0) {
        sb += ", ";
      }
      sb += tmp;
    } else {
      break;
    }
  }

  // Array suffix
  if (sb.length() + 2 <= sb.maxLength()) {
    sb += " ]";
  }
}

#endif
