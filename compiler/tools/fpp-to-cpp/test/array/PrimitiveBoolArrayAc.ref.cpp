// ======================================================================
// \title  PrimitiveBoolArrayAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for PrimitiveBool array
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "PrimitiveBoolArrayAc.hpp"

namespace M {

  // ----------------------------------------------------------------------
  // Constructors
  // ----------------------------------------------------------------------

  PrimitiveBool ::
    PrimitiveBool() :
      Serializable()
  {
    *this = M::PrimitiveBool(false);
  }

  PrimitiveBool ::
    PrimitiveBool(const ElementType (&a)[SIZE]) :
      Serializable()
  {
    *this = a;
  }

  PrimitiveBool ::
    PrimitiveBool(const ElementType& e) :
      Serializable()
  {
    *this = e;
  }

  PrimitiveBool ::
    PrimitiveBool(const std::initializer_list<ElementType>& il) :
      Serializable()
  {
    *this = il;
  }

  PrimitiveBool ::
    PrimitiveBool(const PrimitiveBool& obj) :
      Serializable()
  {
    *this = obj;
  }

  // ----------------------------------------------------------------------
  // Operators
  // ----------------------------------------------------------------------

  PrimitiveBool::ElementType& PrimitiveBool ::
    operator[](const FwSizeType i)
  {
    FW_ASSERT(i < SIZE, static_cast<FwAssertArgType>(i), static_cast<FwAssertArgType>(SIZE));
    return this->elements[i];
  }

  const PrimitiveBool::ElementType& PrimitiveBool ::
    operator[](const FwSizeType i) const
  {
    FW_ASSERT(i < SIZE, static_cast<FwAssertArgType>(i), static_cast<FwAssertArgType>(SIZE));
    return this->elements[i];
  }

  PrimitiveBool& PrimitiveBool ::
    operator=(const PrimitiveBool& obj)
  {
    if (this != &obj) {
      for (FwSizeType index = 0; index < SIZE; index++) {
        this->elements[index] = obj.elements[index];
      }
    }
    return *this;
  }

  PrimitiveBool& PrimitiveBool ::
    operator=(const ElementType (&a)[SIZE])
  {
    for (FwSizeType index = 0; index < SIZE; index++) {
      this->elements[index] = a[index];
    }
    return *this;
  }

  PrimitiveBool& PrimitiveBool ::
    operator=(const std::initializer_list<ElementType>& il)
  {
    // Since we are required to use C++11, this has to be a runtime check
    // In C++14, it can be a static check
    FW_ASSERT(il.size() == SIZE, static_cast<FwAssertArgType>(il.size()), static_cast<FwAssertArgType>(SIZE));
    FwSizeType i = 0;
    for (const auto& e : il) {
      FW_ASSERT(i < SIZE, static_cast<FwAssertArgType>(i), static_cast<FwAssertArgType>(SIZE));
      this->elements[i] = e;
      i++;
    }
    return *this;
  }

  PrimitiveBool& PrimitiveBool ::
    operator=(const ElementType& e)
  {
    for (FwSizeType index = 0; index < SIZE; index++) {
      this->elements[index] = e;
    }
    return *this;
  }

  bool PrimitiveBool ::
    operator==(const PrimitiveBool& obj) const
  {
    for (FwSizeType index = 0; index < SIZE; index++) {
      if (!((*this)[index] == obj[index])) {
        return false;
      }
    }
    return true;
  }

  bool PrimitiveBool ::
    operator!=(const PrimitiveBool& obj) const
  {
    return !(*this == obj);
  }

#ifdef BUILD_UT

  std::ostream& operator<<(std::ostream& os, const PrimitiveBool& obj) {
    Fw::String s;
    obj.toString(s);
    os << s;
    return os;
  }

#endif

  // ----------------------------------------------------------------------
  // Public member functions
  // ----------------------------------------------------------------------

  Fw::SerializeStatus PrimitiveBool ::
    serializeTo(Fw::SerializeBufferBase& buffer) const
  {
    Fw::SerializeStatus status = Fw::FW_SERIALIZE_OK;
    for (FwSizeType index = 0; index < SIZE; index++) {
      status = buffer.serializeFrom((*this)[index]);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }
    }
    return status;
  }

  Fw::SerializeStatus PrimitiveBool ::
    deserializeFrom(Fw::SerializeBufferBase& buffer)
  {
    Fw::SerializeStatus status = Fw::FW_SERIALIZE_OK;
    for (FwSizeType index = 0; index < SIZE; index++) {
      status = buffer.deserializeTo((*this)[index]);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }
    }
    return status;
  }

  FwSizeType PrimitiveBool ::
    serializedSize() const
  {
    return SERIALIZED_SIZE;
  }

#if FW_SERIALIZABLE_TO_STRING

  void PrimitiveBool ::
    toString(Fw::StringBase& sb) const
  {
    // Clear the output string
    sb = "";

    // Array prefix
    if (sb.length() + 2 <= sb.maxLength()) {
      sb += "[ ";
    } else {
      return;
    }

    for (FwSizeType index = 0; index < SIZE; index++) {
      Fw::String tmp;
      tmp.format("%d", this->elements[index]);

      FwSizeType size = tmp.length() + (index > 0 ? 2 : 0);
      if ((size + sb.length()) <= sb.maxLength()) {
        if (index > 0) {
          sb += ", ";
        }
        sb += tmp;
      } else {
        break;
      }
    }

    // Array suffix
    if (sb.length() + 2 <= sb.maxLength()) {
      sb += " ]";
    }
  }

#endif

}
