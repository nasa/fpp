// ======================================================================
// \title  ChoiceToChoiceStateMachineAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for ChoiceToChoice state machine
// ======================================================================

#ifndef FppTest_SmChoice_ChoiceToChoiceStateMachineAc_HPP
#define FppTest_SmChoice_ChoiceToChoiceStateMachineAc_HPP

#include "Fw/FPrimeBasicTypes.hpp"
#include "Fw/Types/ExternalString.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"

namespace FppTest {

  namespace SmChoice {

    //! A state machine for testing choice-to-choice transitions
    //! with hierarchy
    class ChoiceToChoiceStateMachineBase {

        // ----------------------------------------------------------------------
        // Friend classes
        // ----------------------------------------------------------------------

        //! Tester class for the state machine
        friend class ChoiceToChoiceTester;

      public:

        // ----------------------------------------------------------------------
        // Types
        // ----------------------------------------------------------------------

        //! The state type
        enum class State : FwEnumStoreType {
          //! The uninitialized state
          __FPRIME_AC_UNINITIALIZED,
          //! State S1
          S1,
          //! State S3
          S2_S3,
          //! State S4
          S2_S4,
        };

        //! The signal type
        enum class Signal : FwEnumStoreType {
          //! The initial transition
          __FPRIME_AC_INITIAL_TRANSITION,
          //! Signal s
          s,
        };

      protected:

        // ----------------------------------------------------------------------
        // Constructors and Destructors
        // ----------------------------------------------------------------------

        //! Constructor
        ChoiceToChoiceStateMachineBase();

        //! Destructor
        virtual ~ChoiceToChoiceStateMachineBase();

      protected:

        // ----------------------------------------------------------------------
        // Initialization
        // ----------------------------------------------------------------------

        //! Initialize the state machine
        void initBase(
            const FwEnumStoreType id //!< The state machine ID
        );

      public:

        // ----------------------------------------------------------------------
        // Getter functions
        // ----------------------------------------------------------------------

        //! Get the state
        ChoiceToChoiceStateMachineBase::State getState() const;

      public:

        // ----------------------------------------------------------------------
        // Send signal functions
        // ----------------------------------------------------------------------

        //! Signal s
        void sendSignal_s();

      protected:

        // ----------------------------------------------------------------------
        // Actions
        // ----------------------------------------------------------------------

        //! Exit S1
        virtual void action_exitS1(
            Signal signal //!< The signal
        ) = 0;

        //! Action a
        virtual void action_a(
            Signal signal //!< The signal
        ) = 0;

        //! Enter S2
        virtual void action_enterS2(
            Signal signal //!< The signal
        ) = 0;

      protected:

        // ----------------------------------------------------------------------
        // Guards
        // ----------------------------------------------------------------------

        //! Guard g1
        virtual bool guard_g1(
            Signal signal //!< The signal
        ) const = 0;

        //! Guard g2
        virtual bool guard_g2(
            Signal signal //!< The signal
        ) const = 0;

      private:

        // ----------------------------------------------------------------------
        // State and choice entry
        // ----------------------------------------------------------------------

        //! Enter state S2
        void enter_S2(
            Signal signal //!< The signal
        );

        //! Enter choice S2_C2
        void enter_S2_C2(
            Signal signal //!< The signal
        );

        //! Enter state S2_S3
        void enter_S2_S3(
            Signal signal //!< The signal
        );

        //! Enter state S2_S4
        void enter_S2_S4(
            Signal signal //!< The signal
        );

        //! Enter state S1
        void enter_S1(
            Signal signal //!< The signal
        );

        //! Enter choice S1_C1
        void enter_S1_C1(
            Signal signal //!< The signal
        );

      protected:

        // ----------------------------------------------------------------------
        // Member variables
        // ----------------------------------------------------------------------

        //! The state machine ID
        FwEnumStoreType m_id = 0;

        //! The state
        State m_state = State::__FPRIME_AC_UNINITIALIZED;

    };

  }

}

#endif
