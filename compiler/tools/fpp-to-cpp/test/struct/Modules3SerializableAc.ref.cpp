// ======================================================================
// \title  Modules3SerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for Modules3 struct
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "Modules3SerializableAc.hpp"

// ----------------------------------------------------------------------
// Constructors
// ----------------------------------------------------------------------

Modules3 ::
  Modules3() :
    Serializable(),
    m_x(M::Modules1(0, 0.0f))
{
  for (FwSizeType i = 0; i < 3; i++) {
    this->m_arr[i] = M::Modules2(M::Modules1(0, 0.0f));
  }
}

Modules3 ::
  Modules3(
      const M::Modules2& x,
      const Type_of_arr& arr
  ) :
    Serializable(),
    m_x(x)
{
  for (FwSizeType i = 0; i < 3; i++) {
    this->m_arr[i] = arr[i];
  }
}

Modules3 ::
  Modules3(const Modules3& obj) :
    Serializable(),
    m_x(obj.m_x)
{
  for (FwSizeType i = 0; i < 3; i++) {
    this->m_arr[i] = obj.m_arr[i];
  }
}

Modules3 ::
  Modules3(
      const M::Modules2& x,
      const M::Modules2& arr
  ) :
    Serializable(),
    m_x(x)
{
  for (FwSizeType i = 0; i < 3; i++) {
    this->m_arr[i] = arr;
  }
}

// ----------------------------------------------------------------------
// Operators
// ----------------------------------------------------------------------

Modules3& Modules3 ::
  operator=(const Modules3& obj)
{
  if (this == &obj) {
    return *this;
  }

  set(obj.m_x, obj.m_arr);
  return *this;
}

bool Modules3 ::
  operator==(const Modules3& obj) const
{
  if (this == &obj) { return true; }

  // Compare non-array members
  if (!(this->m_x == obj.m_x)) {
    return false;
  }

  // Compare array members
  for (FwSizeType i = 0; i < 3; i++) {
    if (!(this->m_arr[i] == obj.m_arr[i])) {
      return false;
    }
  }

  return true;
}

bool Modules3 ::
  operator!=(const Modules3& obj) const
{
  return !(*this == obj);
}

#ifdef BUILD_UT

std::ostream& operator<<(std::ostream& os, const Modules3& obj) {
  Fw::String s;
  obj.toString(s);
  os << s.toChar();
  return os;
}

#endif

// ----------------------------------------------------------------------
// Member functions
// ----------------------------------------------------------------------

Fw::SerializeStatus Modules3 ::
  serializeTo(Fw::SerializeBufferBase& buffer) const
{
  Fw::SerializeStatus status;

  status = buffer.serializeFrom(this->m_x);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  for (FwSizeType i = 0; i < 3; i++) {
    status = buffer.serializeFrom(this->m_arr[i]);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
  }

  return status;
}

Fw::SerializeStatus Modules3 ::
  deserializeFrom(Fw::SerializeBufferBase& buffer)
{
  Fw::SerializeStatus status;

  status = buffer.deserializeTo(this->m_x);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  for (FwSizeType i = 0; i < 3; i++) {
    status = buffer.deserializeTo(this->m_arr[i]);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
  }

  return status;
}

FwSizeType Modules3 ::
  serializedSize() const
{
  FwSizeType size = 0;
  size += this->m_x.serializedSize();
  for (U32 index = 0; index < 3; index++) {
    size += this->m_arr[index].serializedSize();
  }
  return size;
}

#if FW_SERIALIZABLE_TO_STRING

void Modules3 ::
  toString(Fw::StringBase& sb) const
{
  Fw::String tmp;
  sb = "( ";

  // Format x
  sb += "x = ";
  this->m_x.toString(tmp);
  sb += tmp;
  sb += ", ";

  // Format arr
  sb += "arr = ";
  sb += "[ ";
  for (FwSizeType i = 0; i < 3; i++) {
    this->m_arr[i].toString(tmp);
    if (i > 0) {
      sb += ", ";
    }
    sb += tmp;
  }
  sb += " ]";
  sb += " )";
}

#endif

// ----------------------------------------------------------------------
// Setter functions
// ----------------------------------------------------------------------

void Modules3 ::
  set(
      const M::Modules2& x,
      const Type_of_arr& arr
  )
{
  this->m_x = x;

  for (FwSizeType i = 0; i < 3; i++) {
    this->m_arr[i] = arr[i];
  }
}

void Modules3 ::
  set_x(const M::Modules2& x)
{
  this->m_x = x;
}

void Modules3 ::
  set_arr(const Type_of_arr& arr)
{
  for (FwSizeType i = 0; i < 3; i++) {
    this->m_arr[i] = arr[i];
  }
}
