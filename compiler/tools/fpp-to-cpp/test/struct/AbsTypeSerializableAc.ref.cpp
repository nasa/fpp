// ======================================================================
// \title  AbsTypeSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for AbsType struct
// ======================================================================

#include "AbsTypeSerializableAc.hpp"
#include "Fw/Types/Assert.hpp"

// ----------------------------------------------------------------------
// Constructors
// ----------------------------------------------------------------------

AbsType ::
  AbsType() :
    Serializable(),
    m_t()
{

}

AbsType ::
  AbsType(const T& t) :
    Serializable(),
    m_t(t)
{

}

AbsType ::
  AbsType(const AbsType& obj) :
    Serializable(),
    m_t(obj.m_t)
{

}

// ----------------------------------------------------------------------
// Operators
// ----------------------------------------------------------------------

AbsType& AbsType ::
  operator=(const AbsType& obj)
{
  if (this == &obj) {
    return *this;
  }

  set(obj.m_t);
  return *this;
}

bool AbsType ::
  operator==(const AbsType& obj) const
{
  return (this->m_t == obj.m_t);
}

bool AbsType ::
  operator!=(const AbsType& obj) const
{
  return !(*this == obj);
}

#ifdef BUILD_UT

std::ostream& operator<<(std::ostream& os, const AbsType& obj) {
  Fw::String s;
  obj.toString(s);
  os << s.toChar();
  return os;
}

#endif

// ----------------------------------------------------------------------
// Member functions
// ----------------------------------------------------------------------

Fw::SerializeStatus AbsType ::
  serializeTo(Fw::SerializeBufferBase& buffer) const
{
  Fw::SerializeStatus status;

  status = buffer.serializeFrom(this->m_t);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }

  return status;
}

Fw::SerializeStatus AbsType ::
  deserializeFrom(Fw::SerializeBufferBase& buffer)
{
  Fw::SerializeStatus status;

  status = buffer.deserializeTo(this->m_t);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }

  return status;
}

FwSizeType AbsType ::
  serializedSize() const
{
  FwSizeType size = 0;
  size += T::SERIALIZED_SIZE;
  return size;
}

#if FW_SERIALIZABLE_TO_STRING

void AbsType ::
  toString(Fw::StringBase& sb) const
{
  Fw::String tmp;
  sb = "( ";

  // Format t
  sb += "t = ";
  this->m_t.toString(tmp);
  sb += tmp;
  sb += " )";
}

#endif

// ----------------------------------------------------------------------
// Setter functions
// ----------------------------------------------------------------------

void AbsType ::
  set(const T& t)
{
  this->m_t = t;
}

void AbsType ::
  set_t(const T& t)
{
  this->m_t = t;
}
