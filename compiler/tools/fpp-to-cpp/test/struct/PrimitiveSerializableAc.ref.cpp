// ======================================================================
// \title  PrimitiveSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for Primitive struct
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "PrimitiveSerializableAc.hpp"

// ----------------------------------------------------------------------
// Constructors
// ----------------------------------------------------------------------

Primitive ::
  Primitive() :
    Serializable(),
    m_mF64(0.0),
    m_mI16(0),
    m_mI32(0),
    m_mI64(0),
    m_mI8(0),
    m_mU16(0),
    m_mU32(0),
    m_mU64(0),
    m_mU8(0),
    m_m_bool(false),
    m_m_string(m___fprime_ac_m_string_buffer, sizeof m___fprime_ac_m_string_buffer, Fw::String(""))
{
  for (FwSizeType i = 0; i < 3; i++) {
    this->m_mF32[i] = 0.0f;
  }
}

Primitive ::
  Primitive(
      const Type_of_mF32& mF32,
      F64 mF64,
      I16 mI16,
      I32 mI32,
      I64 mI64,
      I8 mI8,
      U16 mU16,
      U32 mU32,
      U64 mU64,
      U8 mU8,
      bool m_bool,
      const Fw::StringBase& m_string
  ) :
    Serializable(),
    m_mF64(mF64),
    m_mI16(mI16),
    m_mI32(mI32),
    m_mI64(mI64),
    m_mI8(mI8),
    m_mU16(mU16),
    m_mU32(mU32),
    m_mU64(mU64),
    m_mU8(mU8),
    m_m_bool(m_bool),
    m_m_string(m___fprime_ac_m_string_buffer, sizeof m___fprime_ac_m_string_buffer, m_string)
{
  for (FwSizeType i = 0; i < 3; i++) {
    this->m_mF32[i] = mF32[i];
  }
}

Primitive ::
  Primitive(const Primitive& obj) :
    Serializable(),
    m_mF64(obj.m_mF64),
    m_mI16(obj.m_mI16),
    m_mI32(obj.m_mI32),
    m_mI64(obj.m_mI64),
    m_mI8(obj.m_mI8),
    m_mU16(obj.m_mU16),
    m_mU32(obj.m_mU32),
    m_mU64(obj.m_mU64),
    m_mU8(obj.m_mU8),
    m_m_bool(obj.m_m_bool),
    m_m_string(m___fprime_ac_m_string_buffer, sizeof m___fprime_ac_m_string_buffer, obj.m_m_string)
{
  for (FwSizeType i = 0; i < 3; i++) {
    this->m_mF32[i] = obj.m_mF32[i];
  }
}

Primitive ::
  Primitive(
      F32 mF32,
      F64 mF64,
      I16 mI16,
      I32 mI32,
      I64 mI64,
      I8 mI8,
      U16 mU16,
      U32 mU32,
      U64 mU64,
      U8 mU8,
      bool m_bool,
      const Fw::StringBase& m_string
  ) :
    Serializable(),
    m_mF64(mF64),
    m_mI16(mI16),
    m_mI32(mI32),
    m_mI64(mI64),
    m_mI8(mI8),
    m_mU16(mU16),
    m_mU32(mU32),
    m_mU64(mU64),
    m_mU8(mU8),
    m_m_bool(m_bool),
    m_m_string(m___fprime_ac_m_string_buffer, sizeof m___fprime_ac_m_string_buffer, m_string)
{
  for (FwSizeType i = 0; i < 3; i++) {
    this->m_mF32[i] = mF32;
  }
}

// ----------------------------------------------------------------------
// Operators
// ----------------------------------------------------------------------

Primitive& Primitive ::
  operator=(const Primitive& obj)
{
  if (this == &obj) {
    return *this;
  }

  set(obj.m_mF32, obj.m_mF64, obj.m_mI16, obj.m_mI32, obj.m_mI64, obj.m_mI8, obj.m_mU16, obj.m_mU32, obj.m_mU64, obj.m_mU8, obj.m_m_bool, obj.m_m_string);
  return *this;
}

bool Primitive ::
  operator==(const Primitive& obj) const
{
  if (this == &obj) { return true; }

  // Compare non-array members
  if (!(
    (this->m_mF64 == obj.m_mF64) &&
    (this->m_mI16 == obj.m_mI16) &&
    (this->m_mI32 == obj.m_mI32) &&
    (this->m_mI64 == obj.m_mI64) &&
    (this->m_mI8 == obj.m_mI8) &&
    (this->m_mU16 == obj.m_mU16) &&
    (this->m_mU32 == obj.m_mU32) &&
    (this->m_mU64 == obj.m_mU64) &&
    (this->m_mU8 == obj.m_mU8) &&
    (this->m_m_bool == obj.m_m_bool) &&
    (this->m_m_string == obj.m_m_string)
  )) {
    return false;
  }

  // Compare array members
  for (FwSizeType i = 0; i < 3; i++) {
    if (!(this->m_mF32[i] == obj.m_mF32[i])) {
      return false;
    }
  }

  return true;
}

bool Primitive ::
  operator!=(const Primitive& obj) const
{
  return !(*this == obj);
}

#ifdef BUILD_UT

std::ostream& operator<<(std::ostream& os, const Primitive& obj) {
  Fw::String s;
  obj.toString(s);
  os << s.toChar();
  return os;
}

#endif

// ----------------------------------------------------------------------
// Member functions
// ----------------------------------------------------------------------

Fw::SerializeStatus Primitive ::
  serializeTo(Fw::SerializeBufferBase& buffer) const
{
  Fw::SerializeStatus status;

  for (FwSizeType i = 0; i < 3; i++) {
    status = buffer.serializeFrom(this->m_mF32[i]);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
  }
  status = buffer.serializeFrom(this->m_mF64);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serializeFrom(this->m_mI16);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serializeFrom(this->m_mI32);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serializeFrom(this->m_mI64);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serializeFrom(this->m_mI8);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serializeFrom(this->m_mU16);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serializeFrom(this->m_mU32);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serializeFrom(this->m_mU64);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serializeFrom(this->m_mU8);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serializeFrom(this->m_m_bool);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serializeFrom(this->m_m_string);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }

  return status;
}

Fw::SerializeStatus Primitive ::
  deserializeFrom(Fw::SerializeBufferBase& buffer)
{
  Fw::SerializeStatus status;

  for (FwSizeType i = 0; i < 3; i++) {
    status = buffer.deserializeTo(this->m_mF32[i]);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
  }
  status = buffer.deserializeTo(this->m_mF64);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserializeTo(this->m_mI16);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserializeTo(this->m_mI32);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserializeTo(this->m_mI64);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserializeTo(this->m_mI8);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserializeTo(this->m_mU16);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserializeTo(this->m_mU32);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserializeTo(this->m_mU64);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserializeTo(this->m_mU8);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserializeTo(this->m_m_bool);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserializeTo(this->m_m_string);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }

  return status;
}

FwSizeType Primitive ::
  serializedSize() const
{
  FwSizeType size = 0;
  size += sizeof(F32) * 3;
  size += sizeof(F64);
  size += sizeof(I16);
  size += sizeof(I32);
  size += sizeof(I64);
  size += sizeof(I8);
  size += sizeof(U16);
  size += sizeof(U32);
  size += sizeof(U64);
  size += sizeof(U8);
  size += sizeof(U8);
  size += this->m_m_string.serializedSize();
  return size;
}

#if FW_SERIALIZABLE_TO_STRING

void Primitive ::
  toString(Fw::StringBase& sb) const
{
  Fw::String tmp;
  sb = "( ";

  // Format mF32
  sb += "mF32 = ";
  sb += "[ ";
  for (FwSizeType i = 0; i < 3; i++) {
    tmp.format("%f", static_cast<F64>(this->m_mF32[i]));
    if (i > 0) {
      sb += ", ";
    }
    sb += tmp;
  }
  sb += " ]";
  sb += ", ";

  // Format mF64
  sb += "mF64 = ";
  tmp.format("%f", this->m_mF64);
  sb += tmp;
  sb += ", ";

  // Format mI16
  sb += "mI16 = ";
  tmp.format("%" PRIi16 "", this->m_mI16);
  sb += tmp;
  sb += ", ";

  // Format mI32
  sb += "mI32 = ";
  tmp.format("%" PRIi32 "", this->m_mI32);
  sb += tmp;
  sb += ", ";

  // Format mI64
  sb += "mI64 = ";
  tmp.format("%" PRIi64 "", this->m_mI64);
  sb += tmp;
  sb += ", ";

  // Format mI8
  sb += "mI8 = ";
  tmp.format("%" PRIi8 "", this->m_mI8);
  sb += tmp;
  sb += ", ";

  // Format mU16
  sb += "mU16 = ";
  tmp.format("%" PRIu16 "", this->m_mU16);
  sb += tmp;
  sb += ", ";

  // Format mU32
  sb += "mU32 = ";
  tmp.format("%" PRIu32 "", this->m_mU32);
  sb += tmp;
  sb += ", ";

  // Format mU64
  sb += "mU64 = ";
  tmp.format("%" PRIu64 "", this->m_mU64);
  sb += tmp;
  sb += ", ";

  // Format mU8
  sb += "mU8 = ";
  tmp.format("%" PRIu8 "", this->m_mU8);
  sb += tmp;
  sb += ", ";

  // Format m_bool
  sb += "m_bool = ";
  tmp.format("%d", this->m_m_bool);
  sb += tmp;
  sb += ", ";

  // Format m_string
  sb += "m_string = ";
  sb += this->m_m_string;
  sb += " )";
}

#endif

// ----------------------------------------------------------------------
// Setter functions
// ----------------------------------------------------------------------

void Primitive ::
  set(
      const Type_of_mF32& mF32,
      F64 mF64,
      I16 mI16,
      I32 mI32,
      I64 mI64,
      I8 mI8,
      U16 mU16,
      U32 mU32,
      U64 mU64,
      U8 mU8,
      bool m_bool,
      const Fw::StringBase& m_string
  )
{
  this->m_mF64 = mF64;
  this->m_mI16 = mI16;
  this->m_mI32 = mI32;
  this->m_mI64 = mI64;
  this->m_mI8 = mI8;
  this->m_mU16 = mU16;
  this->m_mU32 = mU32;
  this->m_mU64 = mU64;
  this->m_mU8 = mU8;
  this->m_m_bool = m_bool;
  this->m_m_string = m_string;

  for (FwSizeType i = 0; i < 3; i++) {
    this->m_mF32[i] = mF32[i];
  }
}

void Primitive ::
  set_mF32(const Type_of_mF32& mF32)
{
  for (FwSizeType i = 0; i < 3; i++) {
    this->m_mF32[i] = mF32[i];
  }
}

void Primitive ::
  set_mF64(F64 mF64)
{
  this->m_mF64 = mF64;
}

void Primitive ::
  set_mI16(I16 mI16)
{
  this->m_mI16 = mI16;
}

void Primitive ::
  set_mI32(I32 mI32)
{
  this->m_mI32 = mI32;
}

void Primitive ::
  set_mI64(I64 mI64)
{
  this->m_mI64 = mI64;
}

void Primitive ::
  set_mI8(I8 mI8)
{
  this->m_mI8 = mI8;
}

void Primitive ::
  set_mU16(U16 mU16)
{
  this->m_mU16 = mU16;
}

void Primitive ::
  set_mU32(U32 mU32)
{
  this->m_mU32 = mU32;
}

void Primitive ::
  set_mU64(U64 mU64)
{
  this->m_mU64 = mU64;
}

void Primitive ::
  set_mU8(U8 mU8)
{
  this->m_mU8 = mU8;
}

void Primitive ::
  set_m_bool(bool m_bool)
{
  this->m_m_bool = m_bool;
}

void Primitive ::
  set_m_string(const Fw::StringBase& m_string)
{
  this->m_m_string = m_string;
}
