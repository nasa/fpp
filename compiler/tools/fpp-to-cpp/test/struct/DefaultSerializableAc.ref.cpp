// ======================================================================
// \title  DefaultSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for Default struct
// ======================================================================

#include "DefaultSerializableAc.hpp"
#include "Fw/Types/Assert.hpp"

// ----------------------------------------------------------------------
// Constructors
// ----------------------------------------------------------------------

Default ::
  Default() :
    Serializable(),
    m_mU32(54),
    m_mS1(m___fprime_ac_mS1_buffer, sizeof m___fprime_ac_mS1_buffer, Fw::String("hello")),
    m_mF64(0.0)
{

}

Default ::
  Default(
      U32 mU32,
      const Fw::StringBase& mS1,
      F64 mF64
  ) :
    Serializable(),
    m_mU32(mU32),
    m_mS1(m___fprime_ac_mS1_buffer, sizeof m___fprime_ac_mS1_buffer, mS1),
    m_mF64(mF64)
{

}

Default ::
  Default(const Default& obj) :
    Serializable(),
    m_mU32(obj.m_mU32),
    m_mS1(m___fprime_ac_mS1_buffer, sizeof m___fprime_ac_mS1_buffer, obj.m_mS1),
    m_mF64(obj.m_mF64)
{

}

// ----------------------------------------------------------------------
// Operators
// ----------------------------------------------------------------------

Default& Default ::
  operator=(const Default& obj)
{
  if (this == &obj) {
    return *this;
  }

  set(obj.m_mU32, obj.m_mS1, obj.m_mF64);
  return *this;
}

bool Default ::
  operator==(const Default& obj) const
{
  if (this == &obj) { return true; }
  return (
    (this->m_mU32 == obj.m_mU32) &&
    (this->m_mS1 == obj.m_mS1) &&
    (this->m_mF64 == obj.m_mF64)
  );
}

bool Default ::
  operator!=(const Default& obj) const
{
  return !(*this == obj);
}

#ifdef BUILD_UT

std::ostream& operator<<(std::ostream& os, const Default& obj) {
  Fw::String s;
  obj.toString(s);
  os << s.toChar();
  return os;
}

#endif

// ----------------------------------------------------------------------
// Member functions
// ----------------------------------------------------------------------

Fw::SerializeStatus Default ::
  serializeTo(Fw::SerializeBufferBase& buffer) const
{
  Fw::SerializeStatus status;

  status = buffer.serializeFrom(this->m_mU32);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serializeFrom(this->m_mS1);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serializeFrom(this->m_mF64);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }

  return status;
}

Fw::SerializeStatus Default ::
  deserializeFrom(Fw::SerializeBufferBase& buffer)
{
  Fw::SerializeStatus status;

  status = buffer.deserializeTo(this->m_mU32);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserializeTo(this->m_mS1);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserializeTo(this->m_mF64);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }

  return status;
}

FwSizeType Default ::
  serializedSize() const
{
  FwSizeType size = 0;
  size += sizeof(U32);
  size += this->m_mS1.serializedSize();
  size += sizeof(F64);
  return size;
}

#if FW_SERIALIZABLE_TO_STRING

void Default ::
  toString(Fw::StringBase& sb) const
{
  Fw::String tmp;
  sb = "( ";

  // Format mU32
  sb += "mU32 = ";
  tmp.format("%" PRIu32 "", this->m_mU32);
  sb += tmp;
  sb += ", ";

  // Format mS1
  sb += "mS1 = ";
  sb += this->m_mS1;
  sb += ", ";

  // Format mF64
  sb += "mF64 = ";
  tmp.format("%f", this->m_mF64);
  sb += tmp;
  sb += " )";
}

#endif

// ----------------------------------------------------------------------
// Setter functions
// ----------------------------------------------------------------------

void Default ::
  set(
      U32 mU32,
      const Fw::StringBase& mS1,
      F64 mF64
  )
{
  this->m_mU32 = mU32;
  this->m_mS1 = mS1;
  this->m_mF64 = mF64;
}

void Default ::
  set_mU32(U32 mU32)
{
  this->m_mU32 = mU32;
}

void Default ::
  set_mS1(const Fw::StringBase& mS1)
{
  this->m_mS1 = mS1;
}

void Default ::
  set_mF64(F64 mF64)
{
  this->m_mF64 = mF64;
}
