// ======================================================================
// \title  AliasTypeSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for AliasType struct
// ======================================================================

#include "AliasTypeSerializableAc.hpp"
#include "Fw/Types/Assert.hpp"

// ----------------------------------------------------------------------
// Constructors
// ----------------------------------------------------------------------

AliasType ::
  AliasType() :
    Serializable(),
    m_x(0),
    m_y()
{
  for (FwSizeType i = 0; i < 10; i++) {
    // Initialize the external string
    this->m_z[i].setBuffer(&m___fprime_ac_z_buffer[i][0], sizeof m___fprime_ac_z_buffer[i]);
    // Set the array value
    this->m_z[i] = Fw::String("");
  }
}

AliasType ::
  AliasType(
      U16Alias x,
      const TAlias& y,
      const Type_of_z& z
  ) :
    Serializable(),
    m_x(x),
    m_y(y)
{
  for (FwSizeType i = 0; i < 10; i++) {
    // Initialize the external string
    this->m_z[i].setBuffer(&m___fprime_ac_z_buffer[i][0], sizeof m___fprime_ac_z_buffer[i]);
    // Set the array value
    this->m_z[i] = z[i];
  }
}

AliasType ::
  AliasType(const AliasType& obj) :
    Serializable(),
    m_x(obj.m_x),
    m_y(obj.m_y)
{
  for (FwSizeType i = 0; i < 10; i++) {
    // Initialize the external string
    this->m_z[i].setBuffer(&m___fprime_ac_z_buffer[i][0], sizeof m___fprime_ac_z_buffer[i]);
    // Set the array value
    this->m_z[i] = obj.m_z[i];
  }
}

AliasType ::
  AliasType(
      U16Alias x,
      const TAlias& y,
      const Fw::StringBase& z
  ) :
    Serializable(),
    m_x(x),
    m_y(y)
{
  for (FwSizeType i = 0; i < 10; i++) {
    // Initialize the external string
    this->m_z[i].setBuffer(&m___fprime_ac_z_buffer[i][0], sizeof m___fprime_ac_z_buffer[i]);
    // Set the array value
    this->m_z[i] = z;
  }
}

// ----------------------------------------------------------------------
// Operators
// ----------------------------------------------------------------------

AliasType& AliasType ::
  operator=(const AliasType& obj)
{
  if (this == &obj) {
    return *this;
  }

  set(obj.m_x, obj.m_y, obj.m_z);
  return *this;
}

bool AliasType ::
  operator==(const AliasType& obj) const
{
  if (this == &obj) { return true; }

  // Compare non-array members
  if (!(
    (this->m_x == obj.m_x) &&
    (this->m_y == obj.m_y)
  )) {
    return false;
  }

  // Compare array members
  for (FwSizeType i = 0; i < 10; i++) {
    if (!(this->m_z[i] == obj.m_z[i])) {
      return false;
    }
  }

  return true;
}

bool AliasType ::
  operator!=(const AliasType& obj) const
{
  return !(*this == obj);
}

#ifdef BUILD_UT

std::ostream& operator<<(std::ostream& os, const AliasType& obj) {
  Fw::String s;
  obj.toString(s);
  os << s.toChar();
  return os;
}

#endif

// ----------------------------------------------------------------------
// Member functions
// ----------------------------------------------------------------------

Fw::SerializeStatus AliasType ::
  serialize(Fw::SerializeBufferBase& buffer) const
{
  Fw::SerializeStatus status;

  status = buffer.serialize(this->m_x);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.serialize(this->m_y);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  for (FwSizeType i = 0; i < 10; i++) {
    status = buffer.serialize(this->m_z[i]);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
  }

  return status;
}

Fw::SerializeStatus AliasType ::
  deserialize(Fw::SerializeBufferBase& buffer)
{
  Fw::SerializeStatus status;

  status = buffer.deserialize(this->m_x);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  status = buffer.deserialize(this->m_y);
  if (status != Fw::FW_SERIALIZE_OK) {
    return status;
  }
  for (FwSizeType i = 0; i < 10; i++) {
    status = buffer.deserialize(this->m_z[i]);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
  }

  return status;
}

#if FW_SERIALIZABLE_TO_STRING

void AliasType ::
  toString(Fw::StringBase& sb) const
{
  static const char* formatString =
    "( "
    "x = %s, "
    "y = %s, "
    "z = [ %s ]"
    " )";

  // Declare strings to hold any serializable toString() arguments
  Fw::String yStr;
  Fw::String zStr;

  // Call toString for arrays and serializable types
  this->m_y.toString(yStr);
  for (FwSizeType i = 0; i < 10; i++) {
    Fw::String zTmp;
    zTmp = this->m_z[i];

    FwSizeType size = zTmp.length() + (i > 0 ? 2 : 0);
    if ((size + zStr.length()) <= zStr.maxLength()) {
      if (i > 0) {
        zStr += ", ";
      }
      zStr += zTmp;
    } else {
      break;
    }
  }

  sb.format(
    formatString,
    this->m_x,
    yStr.toChar(),
    zStr.toChar()
  );
}

#endif

// ----------------------------------------------------------------------
// Setter functions
// ----------------------------------------------------------------------

void AliasType ::
  set(
      U16Alias x,
      const TAlias& y,
      const Type_of_z& z
  )
{
  this->m_x = x;
  this->m_y = y;

  for (FwSizeType i = 0; i < 10; i++) {
    // Initialize the external string
    this->m_z[i].setBuffer(&m___fprime_ac_z_buffer[i][0], sizeof m___fprime_ac_z_buffer[i]);
    // Set the array value
    this->m_z[i] = z[i];
  }
}

void AliasType ::
  setx(U16Alias x)
{
  this->m_x = x;
}

void AliasType ::
  sety(const TAlias& y)
{
  this->m_y = y;
}

void AliasType ::
  setz(const Type_of_z& z)
{
  for (FwSizeType i = 0; i < 10; i++) {
    this->m_z[i] = z[i];
  }
}
