// ======================================================================
// \title  DefaultSerializableAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for Default struct
// ======================================================================

#ifndef DefaultSerializableAc_HPP
#define DefaultSerializableAc_HPP

#include "Fw/FPrimeBasicTypes.hpp"
#include "Fw/Types/ExternalString.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"

class Default :
  public Fw::Serializable
{

  public:

    // ----------------------------------------------------------------------
    // Constants
    // ----------------------------------------------------------------------

    enum {
      //! The size of the serial representation
      SERIALIZED_SIZE =
        sizeof(U32) +
        Fw::StringBase::STATIC_SERIALIZED_SIZE(40) +
        sizeof(F64)
    };

  public:

    // ----------------------------------------------------------------------
    // Constructors
    // ----------------------------------------------------------------------

    //! Constructor (default value)
    Default();

    //! Member constructor
    Default(
        U32 mU32,
        const Fw::StringBase& mS1,
        F64 mF64
    );

    //! Copy constructor
    Default(
        const Default& obj //!< The source object
    );

  public:

    // ----------------------------------------------------------------------
    // Operators
    // ----------------------------------------------------------------------

    //! Copy assignment operator
    Default& operator=(
        const Default& obj //!< The source object
    );

    //! Equality operator
    bool operator==(
        const Default& obj //!< The other object
    ) const;

    //! Inequality operator
    bool operator!=(
        const Default& obj //!< The other object
    ) const;

#ifdef BUILD_UT

    //! Ostream operator
    friend std::ostream& operator<<(
        std::ostream& os, //!< The ostream
        const Default& obj //!< The object
    );

#endif

  public:

    // ----------------------------------------------------------------------
    // Member functions
    // ----------------------------------------------------------------------

    //! Serialization
    Fw::SerializeStatus serializeTo(
        Fw::SerializeBufferBase& buffer //!< The serial buffer
    ) const;

    //! Deserialization
    Fw::SerializeStatus deserializeFrom(
        Fw::SerializeBufferBase& buffer //!< The serial buffer
    );

    //! Get the dynamic serialized size of the struct
    FwSizeType serializedSize() const;

#if FW_SERIALIZABLE_TO_STRING

    //! Convert struct to string
    void toString(
        Fw::StringBase& sb //!< The StringBase object to hold the result
    ) const;

#endif

    // ----------------------------------------------------------------------
    // Getter functions
    // ----------------------------------------------------------------------

    //! Get member mU32
    U32 get_mU32() const
    {
      return this->m_mU32;
    }

    //! Get member mS1
    Fw::ExternalString& get_mS1()
    {
      return this->m_mS1;
    }

    //! Get member mS1 (const)
    const Fw::ExternalString& get_mS1() const
    {
      return this->m_mS1;
    }

    //! Get member mF64
    F64 get_mF64() const
    {
      return this->m_mF64;
    }

    // ----------------------------------------------------------------------
    // Setter functions
    // ----------------------------------------------------------------------

    //! Set all members
    void set(
        U32 mU32,
        const Fw::StringBase& mS1,
        F64 mF64
    );

    //! Set member mU32
    void set_mU32(U32 mU32);

    //! Set member mS1
    void set_mS1(const Fw::StringBase& mS1);

    //! Set member mF64
    void set_mF64(F64 mF64);

  protected:

    // ----------------------------------------------------------------------
    // Member variables
    // ----------------------------------------------------------------------

    U32 m_mU32;
    char m___fprime_ac_mS1_buffer[Fw::StringBase::BUFFER_SIZE(40)];
    Fw::ExternalString m_mS1;
    F64 m_mF64;

};

#endif
